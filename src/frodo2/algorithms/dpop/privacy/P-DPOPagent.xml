<!-- 
FRODO: a FRamework for Open/Distributed Optimization
Copyright (C) 2008-2013  Thomas Leaute, Brammert Ottens & Radoslaw Szymanek

FRODO is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FRODO is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


How to contact the authors: 
<http://frodo2.sourceforge.net/>
-->

<!-- Overall definition of the agent
	- measureTime: whether the simulated time metric should be enabled instead of just measuring wall clock time
	- measureMsgs: whether to measure the number of messages and the total amount of information sent (WARNING! This is computationally expensive)
 -->
<agentDescription className = "frodo2.algorithms.SingleQueueAgent" measureTime = "true" measureMsgs = "false" >
	
	<!-- The MailMan used when measuring time
		 - mailmanClass: the class of the mailman to be used
	-->
	<mailman mailmanClass = "frodo2.communication.mailer.CentralMailer"/>
	
	<!-- The XCSP parser
		- parserClass: the class of the parser/subsolver to be used. Currently supported:
			- frodo2.algorithms.XCSPparser: the default parser that does not consider local subproblems
			- frodo2.solutionSpaces.JaCoP.JaCoPxcspParser: a parser based on JaCoP that can be used for DCOPs with complex local subproblems
		- displayGraph: if true, displays the constraint graph in DOT format (default = false)
		- domClass: the class to be used for variable values; the supported values are: 
			- frodo2.solutionSpaces.AddableInteger 	(default) for integer-valued variables
			- frodo2.solutionSpaces.AddableReal 		for (finite-domain) real-valued variables
		- utilClass: the class to be used for utility values; the supported values are: 
			- frodo2.solutionSpaces.AddableInteger 	(default) for integer utilities
			- frodo2.solutionSpaces.AddableReal 		for decimal utilities
		- DOTrenderer: the class to be used to display the constraint graph. Supported values:
			- empty string: displays the constraint graph in DOT format in the console; 
			- frodo2.gui.DOTrenderer: renders the constraint graph in a new window. Assumes that Graphviz' "dot" command is on the shell path. 
		- countNCCCs: whether Non-Concurrent Constraint Checks should be counted (default = false)
	 -->
	<parser parserClass = "frodo2.algorithms.XCSPparser" 
			displayGraph = "true" 
			domClass = "frodo2.solutionSpaces.AddableInteger" 
			utilClass = "frodo2.solutionSpaces.AddableInteger"
			DOTrenderer = ""
			countNCCCs = "false" />

	<!-- A set of modules, each being parameterized by the following attributes: 
		- className: the name of the class implementing the module
		- reportStats (only for StatsReporter modules): whether statistics should be reported to the central controller, if any (default = false)
		- messages (optional): a list of "message" elements, each parameterized by the following attributes: 
			- name: the name of the public static String field in the module that identifies the message
			- value: the type to be used for that message
			- ownerClass (optional): if present, specifies the name of a class, and the attribute "value" is then interpreted as a public static String field of that class
	 -->
	<modules>
		
		<!-- For each connected component of the constraint graph, elects a root variable for the DFS tree using the secure algorithm in P-DPOP
			- minNbrLies: must be greater than the diameter of the largest connected component in the constraint graph
		 -->
		<module className = "frodo2.algorithms.varOrdering.election.SecureVarElection" 
				minNbrLies = "150" >
			<messages>
				<message name = "START_MSG_TYPE" 
						 value = "START_AGENT" 
						 ownerClass = "frodo2.algorithms.AgentInterface" />
			</messages>
		</module>
		
		<!-- For each given root variable, builds up a DFS tree rooted at this variable 
			- DOTrenderer: the class to be used to display the DFS. Supported values:
				- empty string: displays the DFS in DOT format in the console; 
				- frodo2.gui.DOTrenderer: renders the DFS in a new window. Assumes that Graphviz' "dot" command is on the shell path. 
		-->
		<module className = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" 
				reportStats = "true"
				DOTrenderer = "">
			
			<!-- The random scoring heuristic is the only one that does not leak out topological information -->
			<dfsHeuristic className = "frodo2.algorithms.varOrdering.dfs.DFSgeneration$BlindScoringHeuristic" >
				<scoringHeuristic className = "frodo2.algorithms.heuristics.RandScoringHeuristic" />
			</dfsHeuristic>
			
			<messages>
				<message name = "START_MSG_TYPE" 
						 value = "START_AGENT" 
						 ownerClass = "frodo2.algorithms.AgentInterface" />
				<message name = "ROOT_VAR_MSG_TYPE" 
						 value = "OUTPUT_MSG_TYPE" 
						 ownerClass = "frodo2.algorithms.varOrdering.election.LeaderElectionMaxID" />
			</messages>
		</module>
		
		<!-- Intercepts UTIL and VALUE messages and obfuscates variable names and variable values
			- mergeBack: (default is false) if true, merges back-edges by using the same codenames for each variable's (pseudo-)children to improve performance (at the expense of topology privacy)
			- numBits: The size in bits of the obfuscation keys used to obfuscate utilities. This parameter should be at least 128 to ensure decent utility obfuscation
		-->
		<module className = "frodo2.algorithms.dpop.privacy.VariableObfuscation"
				reportStats = "true" 
				mergeBack = "false"
				numBits = "128" >
		</module>
		
		<!-- Aggregates the agents' utilities bottom up following the DFS
			- minNCCCs (default = false): whether to optimize runtime and memory (false) or NCCC count (true). One is at the expense of the other. 
		 -->
		<module className = "frodo2.algorithms.dpop.UTILpropagation" 
				reportStats = "false" 
				minNCCCs = "false" >
			<messages>
				<message name = "START_MSG_TYPE" 
						 value = "START_AGENT" 
						 ownerClass = "frodo2.algorithms.AgentInterface" />
				<message name = "DFS_MSG_TYPE" 
						 value = "OUTPUT_MSG_TYPE" 
						 ownerClass = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" />
			</messages>
		</module>
		
		<!-- Propagates the optimal value assignments top down following the DFS 
			- swap: whether optimal conditional assignments should be swapped until the VALUE message is received (default: false)
		 -->
		<module className = "frodo2.algorithms.dpop.VALUEpropagation" 
				reportStats = "false" 
				swap = "false" >
			<messages>
				<message name = "START_MSG_TYPE" 
						 value = "START_AGENT" 
						 ownerClass = "frodo2.algorithms.AgentInterface" />
				<message name = "DFS_MSG_TYPE" 
						 value = "OUTPUT_MSG_TYPE" 
						 ownerClass = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" />
				<message name = "UTIL_MSG_TYPE" 
						 value = "OUTPUT_MSG_TYPE" 
						 ownerClass = "frodo2.algorithms.dpop.UTILpropagation" />
				<message name = "SEPARATOR_MSG_TYPE" 
						 value = "SEPARATOR_MSG_TYPE" 
						 ownerClass = "frodo2.algorithms.dpop.UTILpropagation" />
			</messages>
		</module>
	</modules>
</agentDescription>